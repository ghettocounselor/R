colour=Genre))
w + geom_point(size=3) +
facet_grid(Genre~.)
w + geom_point(size=3) +
facet_grid(.~Year)
w + geom_point(size=3) +
facet_grid(Genre~Year)
w + geom_point(size=3) +
geom_smother() +
facet_grid(Genre~Year)
w + geom_point(size=3) +
geom_smother() +
facet_grid(Genre~Year)
w + geom_point(size=3) +
geom_smooth() +
facet_grid(Genre~Year)
facet_grid(Genre~Year)
w + geom_point(size=3) +
facet_grid(Genre~.)
w + geom_point(size=3) +
facet_grid(.~Year)
w + geom_point(size=3) +
facet_grid(Genre~Year)
w + geom_point(aes(size=BudgetMillions) +
geom_smooth() +
facet_grid(Genre~Year)
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() +
facet_grid(Genre~Year)
w + geom_point(size=3) +
geom_smooth() +
facet_grid(Genre~Year)
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() +
facet_grid(Genre~Year)
m <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
size=BudgetMillions,
colour=Genre))
m + geom_point()
m + geom_point() +
xlim(50,100)
ylim(50,100)
# the above doesn't always work well
n <- ggplot(data-movies, aes(x=BudgetMillions))
n + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black") +
ylim(0,50)
# the above doesn't always work well
n <- ggplot(data-movies, aes(x=BudgetMillions))
# the above doesn't always work well
n <- ggplot(data=movies, aes(x=BudgetMillions))
n + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black") +
ylim(0,50)
#how do we zoom
n + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black") +
coord_cartesian(ylim=c(0,50))
#lets improve
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() +
facet_grid(Genre~Year)
#lets improve
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() +
facet_grid(Genre~Year) +
coord_cartesian(ylim=(0,100))
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() +
facet_grid(Genre~Year) +
coord_cartesian(ylim=(0,100))
o <- geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
o <- ggplot(data=movies, aes(x=BudgetMillions))
# MAPPING fill to Genre and SETTING the colour to black
o + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
o <- ggplot(data=movies, aes(x=BudgetMillions))
# MAPPING fill to Genre and SETTING the colour to black
o + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
h <- o + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
o <- ggplot(data=movies, aes(x=BudgetMillions))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
o <- ggplot(data=movies, aes(x=BudgetMillions))
# MAPPING fill to Genre and SETTING the colour to black
o + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
h <- o + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
# MAPPING fill to Genre and SETTING the colour to black
o + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
# MAPPING fill to Genre and SETTING the colour to black
h <- o + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
# now we have save o and its geomitry in h
h + xlab("Money Axis")
# now we have save o and its geomitry in h
h + xlab("Money Axis") + ylab("Number of Movies")
#label formatting
h + xlab("Money Axis") + ylab("Number of Movies") +
them(axis.title.x = element_text(colour="Darkgreen", size=30),
axis.title.y = element_text(colour="Red", size=30))
#label formatting
h + xlab("Money Axis") + ylab("Number of Movies") +
theme(axis.title.x = element_text(colour="Darkgreen", size=30),
axis.title.y = element_text(colour="Red", size=30))
#tick mark formatting
h + xlab("Money Axis") + ylab("Number of Movies") +
#here we are just going to set these elements not map them
theme(axis.title.x = element_text(colour="Darkgreen", size=30),
axis.title.y = element_text(colour="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20))
?Theme
?theme
#legend formatting
h + xlab("Money Axis") + ylab("Number of Movies") +
#here we are just going to set these elements not map them
theme(axis.title.x = element_text(colour="Darkgreen", size=30),
axis.title.y = element_text(colour="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=20),
legend.text = element_text(size=20),
legend.position = c(1,1)) #
#legend formatting
h + xlab("Money Axis") + ylab("Number of Movies") +
#here we are just going to set these elements not map them
theme(axis.title.x = element_text(colour="Darkgreen", size=30),
axis.title.y = element_text(colour="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=20),
legend.text = element_text(size=20),
legend.position = c(1,1),
# positioning 0,0 is bottom left 0,1 is lower right
# 1,0 is upper left and 1,1 is top right corner
legend.position = c(1,1))
#legend formatting
h + xlab("Money Axis") + ylab("Number of Movies") +
#here we are just going to set these elements not map them
theme(axis.title.x = element_text(colour="Darkgreen", size=30),
axis.title.y = element_text(colour="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=20),
legend.text = element_text(size=20),
legend.position = c(1,1),
# positioning 0,0 is bottom left 0,1 is lower right
# 1,0 is upper left and 1,1 is top right corner
legend.justification = c(1,1))
#legend formatting
h + xlab("Money Axis") + ylab("Number of Movies") +
ggtitle("Movie Budget Distribution") +
#in theme we are just going to set these elements not map them
theme(axis.title.x = element_text(colour="Darkgreen", size=30),
axis.title.y = element_text(colour="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=20),
legend.text = element_text(size=20),
legend.position = c(1,1),
# positioning 0,0 is bottom left 0,1 is lower right
# 1,0 is upper left and 1,1 is top right corner
legend.justification = c(1,1) # pulls it into graph
)
#legend formatting
h + xlab("Money Axis") +
ylab("Number of Movies") +
ggtitle("Movie Budget Distribution") +
#in theme we are just going to set these elements not map them
theme(axis.title.x = element_text(colour="Darkgreen", size=30),
axis.title.y = element_text(colour="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=20),
legend.text = element_text(size=20),
legend.position = c(1,1),
# positioning 0,0 is bottom left 0,1 is lower right
# 1,0 is upper left and 1,1 is top right corner
legend.justification = c(1,1) # pulls it into graph
plot.title = element_text(colour="DarkBlue",
size=40,
family="courier"))
#legend formatting
h + xlab("Money Axis") +
ylab("Number of Movies") +
ggtitle("Movie Budget Distribution") +
#in theme we are just going to set these elements not map them
theme(axis.title.x = element_text(colour="Darkgreen", size=30),
axis.title.y = element_text(colour="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=20),
legend.text = element_text(size=20),
legend.position = c(1,1),
# positioning 0,0 is bottom left 0,1 is lower right
# 1,0 is upper left and 1,1 is top right corner
legend.justification = c(1,1) # pulls it into graph
plot.title = element_text(colour="DarkBlue",
size=40,
family="Courier"))
#legend formatting
h + xlab("Money Axis") +
ylab("Number of Movies") +
ggtitle("Movie Budget Distribution") +
#in theme we are just going to set these elements not map them
theme(axis.title.x = element_text(colour="Darkgreen", size=30),
axis.title.y = element_text(colour="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=20),
legend.text = element_text(size=20),
legend.position = c(1,1),
# positioning 0,0 is bottom left 0,1 is lower right
# 1,0 is upper left and 1,1 is top right corner
legend.justification = c(1,1), # pulls it into graph
plot.title = element_text(colour="DarkBlue",
size=40,
family="Courier"))
#Import the Data
getwd()
#setwd("_")
mov <- read.csv("Section6-Homework-Data.csv")
#Data Exploration
head(mov) #top rows
summary(mov) #column summaries
str(mov) #structure of the dataset
#Activate GGPlot2
#install.packages("ggplot2")
library(ggplot2)
#{Offtopic} This Is A Cool Insight:
ggplot(data=mov, aes(x=Day.of.Week)) + geom_bar()
#------------------- filtering Data Frames
stats <- read.csv("Section5 - P2-Demographic-Data.csv")
head(stats)
filt
# notes from the section homework
# We will start with the Genre filter and use the Logical 'OR' aka the pipe |
# operator to select multiple Genres:
filt <- (stats$Country.Name == "Malta") | (stats$Country.Name == "Aruba") | (stats$Country.Name == "Albania")| (stats$Country.Name == "Argentina")
filt
# notes from the section homework
# We will start with the Genre filter and use the Logical 'OR' aka the pipe |
# operator to select multiple Genres:
filteredstats <- (stats$Country.Name == "Malta") | (stats$Country.Name == "Aruba") | (stats$Country.Name == "Albania")| (stats$Country.Name == "Argentina")
filteredstats
#{Offtopic} This Is A Cool Insight:
ggplot(data=mov, aes(x=Day.of.Week)) + geom_bar()
# Now we need to filter our dataset to leave only the
# Genres and Studios that we are interested in
# We will start with the Genre filter and use the Logical 'OR' aka the pipe |
# operator to select multiple Genres:
filt <- (mov$Genre == "action") | (mov$Genre == "adventure") | (mov$Genre == "animation") | (mov$Genre == "comedy") | (mov$Genre == "drama")
#Now let's do the same for the Studio filter:
filt2 <- (mov$Studio == "Buena Vista Studios") | (mov$Studio ==  "WB") | (mov$Studio ==  "Fox") | (mov$Studio ==  "Universal") | (mov$Studio ==  "Sony") | (mov$Studio ==  "Paramount Pictures")
#Apply the row filters to the dataframe
mov2 <- mov[filt & filt2,]
mov2
str()
str(mov2)
summary(mov2)
colnames(mov2)
colnametest <- colnames(mov2)
colnametest
colnametest(18)
colnametest(17;18)
colnametest(17:18)
colnametest(17,18)
colnametest(c(17,18)
colnametest(c(17,18))
isvector(colnametest)
is.vector(colnametest)
coltest <- c(18)
coltest
coltest <- colnametest(18)
coltest <- colnametest(c(18)
coltest
summary(mov2)
coltest[18]
colnametest[18]
colnametest[18]
summary(mov2)
#Prepare the plot's data and aes layers
#Note we did not rename the columns.
#Use str() or summary() to fin out the correct column names
p <- ggplot(data=mov2, aes(x=Genre, y=Gross % US))
#Prepare the plot's data and aes layers
#Note we did not rename the columns.
#Use str() or summary() to find out the correct column names
p <- ggplot(data=mov2, aes(x=Genre, y="Gross % US"))
p #Nothing happens. We need a geom.
mov2
#Prepare the plot's data and aes layers
#Note we did not rename the columns.
#Use str() or summary() to find out the correct column names
p <- ggplot(data=mov2, aes(x=Genre, y=Gross...US))
#Apply the row filters to the dataframe
mov2 <- mov[filt & filt2,]
#Prepare the plot's data and aes layers
#Note we did not rename the columns.
#Use str() or summary() to find out the correct column names
p <- ggplot(data=mov2, aes(x=Genre, y=Gross...US))
#another way
filt2 <- mov$Studio %in% c("Buena Vista Studios","WB","Fox","Universal","Sony","Paramount Pictures")
#Apply the row filters to the dataframe
mov2 <- mov[filt & filt2,]
mov2
summary(mov2)
summary(mov2)
summary(mov2)
summary(mov2)
summary(mov2)
colnames(mov2)
colnametest <- colnames(mov2)
#Add a Point Geom Layer
p +
geom_point()
#Add a boxplot instead of the points
p +
boxplot()
#Add a boxplot instead of the points
p +
boxplot()
#Add a boxplot instead of the points
p +
geom_boxplot()
#Add points
p +
geom_boxplot() +
geom_jitter()
#Add points
p +
geom_boxplot() +
geom_points()
#Replace points with jitter
p +
geom_boxplot() +
geom_jitter()
#Add points
p +
geom_boxplot() +
geom_points()
#Replace points with jitter
p +
geom_boxplot() +
geom_jitter()
#Add points
p +
geom_boxplot() +
geom_points()
#Add points
p +
geom_boxplot() +
geom_point()
#Place boxplot on top of jitter
p +
geom_jitter() +
geom_boxplot()
#Add boxplot transparency
p +
geom_jitter() +
geom_boxplot(alpha=0.7)
#Good. Now add size and colour to the points:
p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha=0.7)
#Add a boxplot instead of the points
p +
geom_boxplot()
#See the remaining black points? Where are they from?
#They are part of the boxplot - Refer to our observation (*) above
# check here
p +
geom_boxplot() # these are a part of the box plot
#Good. Now add size and colour to the points:
p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha=0.7)
#Let's remove them:
p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha = 0.7, outlier.colour = NA)
#Let's "Save" our progress by placing it into a new object:
q <- p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha = 0.7, outlier.colour = NA)
q
#Non-data ink
q <- q +
xlab("Genre") + #x axis title
ylab("Gross % US") + #y axis title
ggtitle("Domestic Gross % by Genre") #plot title
q
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20))
#Theme
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
)
q
#Theme
q <- q +
theme(
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
)
q
#Theme
q <- q +
theme(
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
)
q
#Final touch. We haven't discussed this in the course,
#However this is how you can change individual legend titles:
q$labels$size = "Budget $M"
q
#Theme
q <- q +
theme(
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
)
q
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
t <- ggplot(data=movies, aes(x=AudienceRating))
t
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
movies <- read.csv("Section6Datafile - Movie-Ratings.csv")
movies
t <- ggplot(data=movies, aes(x=AudienceRating))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
library(ggplot2)
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
#another way - it's really a matter of taste which way you go this
# define the aesthetics initially then change, perhaps when stacking graphs
t <- ggplot(data=movies)
t + geom_histogram(binwidth = 10,
aes(x=AudienceRating),
fill="White", colour="Blue")
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating)) +
geom_point()
colnames(movies) <- c("Film","Genre","CriticRating","AudienceRating","BudgetMillions","Year")
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() +
facet_grid(Genre~Year)
